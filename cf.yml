AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Serverlesspresso core stack.
Parameters:
  SESFromAddress:
    Type: String
    Description: The e-mail address to send the secret login code from
  S3BucketName:
      AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
      Type: String
      Description: Location of the Lambda trigger files
  AppName:
    Type: String
    Description: Application name (eg. serverlesspresso)
    Default: Serverlesspresso
  Service:
    Type: String
    Description: Service name (eg. core)
    Default: core
  LogRetentionInDays:
    Type: Number
    Default: 14
    Description: CloudWatch Logs retention period
  TimeInterval:
    Type: Number
    Description: Time interval of buckets (mins)
    Default: 60000
  CodeLength:
    Type: Number
    Description: Code length in characters
    Default: 10
  TokensPerBucket:
    Type: Number
    Description: Tokens in each bucket
    Default: 60000000
  Source:
    Type: String
    Description: Event bus source by application
    Default: awsserverlessda.serverlesspresso
Globals:
  Api:
    Cors:
      AllowOrigin: '''*'''
      AllowHeaders: '''Content-Type'''
      AllowMethods: '''GET,OPTIONS'''
Resources:
  DefineAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub '${S3BucketName}'
        Key: 'define-auth-challenge.zip'
      Handler: define-auth-challenge/define-auth-challenge.handler
      Runtime: nodejs14.x

  CreateAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Sub '${S3BucketName}'
        Key: 'create-auth-challenge.zip'
      Handler: create-auth-challenge/create-auth-challenge.handler
      Runtime: nodejs14.x
      Environment:
        Variables:
          SES_FROM_ADDRESS: !Ref SESFromAddress
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
              Resource: "*"

  VerifyAuthChallengeResponse:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Sub '${S3BucketName}'
        Key: 'verify-auth-challenge-response.zip'
      Handler: verify-auth-challenge-response/verify-auth-challenge-response.handler
      Runtime: nodejs14.x

  PreSignUp:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Sub '${S3BucketName}'
        Key: 'pre-sign-up.zip'
      Handler: pre-sign-up/pre-sign-up.handler
      Runtime: nodejs14.x

  PostAuthentication:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Sub '${S3BucketName}'
        Key: 'post-authentication.zip'
      Handler: post-authentication/post-authentication.handler
      Runtime: nodejs14.x
      Role: !GetAtt PostAuthenticationRole.Arn
  PostAuthenticationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  DefineAuthChallengeInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DefineAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  CreateAuthChallengeInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CreateAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  VerifyAuthChallengeResponseInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt VerifyAuthChallengeResponse.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  PreSignUpInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignUp.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  PostAuthenticationInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PostAuthentication.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  SetUserAttributesPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: allow-set-user-attributes
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:AdminUpdateUserAttributes
            Resource:
              - !GetAtt UserPool.Arn
      Roles:
        - !Ref PostAuthenticationRole
  ServerlesspressoEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: Serverlesspresso
    Metadata:
      SamResourceId: ServerlesspressoEventBus
  CoreEventBusNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Sub: /${AppName}/${Service}/eventbusname
      Description: EventBus Name
      Type: String
      Value:
        Ref: ServerlesspressoEventBus
    Metadata:
      SamResourceId: CoreEventBusNameParameter
  CoreEventBusARNParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Sub: /${AppName}/${Service}/eventbusarn
      Description: EventBus ARN
      Type: String
      Value:
        Fn::Sub: ${ServerlesspressoEventBus.Arn}
    Metadata:
      SamResourceId: CoreEventBusARNParameter
  ServerlesspressoRealtime:
    Type: AWS::IoT::Thing
    Properties:
      ThingName: serverlesspresso-realtime-workshop
      AttributePayload:
        Attributes: {}
    Metadata:
      SamResourceId: ServerlesspressoRealtime
  IoTRealtimeParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Sub: /${AppName}/${Service}/realtime
      Description: IoTRealtime URL
      Type: String
      Value:
        Fn::GetAtt:
        - IotEndpoint
        - IotEndpointAddress
    Metadata:
      SamResourceId: IoTRealtimeParameter
  GetIoTEndpointFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Sub '${S3BucketName}'
        Key: 'GetIoTEndpoint.zip'
      Handler: GetIoTEndpoint/GetIoTEndpoint.handler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 3
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - iot:DescribeEndpoint
          Resource:
          - '*'
    Metadata:
      SamResourceId: GetIoTEndpointFunction
  GetIoTEndpointLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${GetIoTEndpointFunction}
      RetentionInDays:
        Ref: LogRetentionInDays
    Metadata:
      SamResourceId: GetIoTEndpointLogGroup
  IotEndpoint:
    Type: Custom::IotEndpoint
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - GetIoTEndpointFunction
        - Arn
    Metadata:
      SamResourceId: IotEndpoint
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ServerlesspressoUserPool
      AutoVerifiedAttributes:
      - email
      EmailVerificationMessage: 'Here is your Serverlesspresso workshop verification
        code: {####}.'
      EmailVerificationSubject: Serverlesspresso workshop code
      UsernameAttributes: 
      - email
      MfaConfiguration: 'OFF'
      Schema:
      - Name: email
        AttributeDataType: String
        Mutable: false
        Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      LambdaConfig:
        CreateAuthChallenge: !GetAtt CreateAuthChallenge.Arn
        DefineAuthChallenge: !GetAtt DefineAuthChallenge.Arn
        PreSignUp: !GetAtt PreSignUp.Arn
        VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallengeResponse.Arn
        PostAuthentication: !GetAtt PostAuthentication.Arn
    Metadata:
      SamResourceId: UserPool
  UserPoolAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: admin
      UserPoolId:
        Ref: UserPool
    
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      GenerateSecret: false
      UserPoolId:
        Ref: UserPool
    Metadata:
      SamResourceId: UserPoolClient
  UserPoolParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Sub: /${AppName}/${Service}/userpool
      Description: UserPool ID
      Type: String
      Value:
        Ref: UserPool
    Metadata:
      SamResourceId: UserPoolParameter
  UserPoolClientParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Sub: /${AppName}/${Service}/userpoolclient
      Description: UserPool Client
      Type: String
      Value:
        Ref: UserPoolClient
    Metadata:
      SamResourceId: UserPoolClientParameter
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: ServerlesspressoIdentityPool
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
      - ClientId:
          Ref: UserPoolClient
        ProviderName:
          Fn::GetAtt:
          - UserPool
          - ProviderName
    Metadata:
      SamResourceId: IdentityPool
  CognitoUnAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action:
          - sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              cognito-identity.amazonaws.com:aud:
                Ref: IdentityPool
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: unauthenticated
      Policies:
      - PolicyName: CognitoUnauthorizedPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cognito-sync:*
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:cognito-sync:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - :identitypool/
                - Ref: IdentityPool
          - Effect: Allow
            Action:
            - iot:Connect
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:iot:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - :client/serverlesspresso-*
          - Effect: Allow
            Action:
            - iot:Subscribe
            Resource: '*'
          - Effect: Allow
            Action:
            - iot:Receive
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:iot:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - :topic/*
    Metadata:
      SamResourceId: CognitoUnAuthorizedRole
  CognitoAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action:
          - sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              cognito-identity.amazonaws.com:aud:
                Ref: IdentityPool
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: authenticated
      Policies:
      - PolicyName: CognitoAuthorizedPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cognito-sync:*
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:cognito-sync:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - :identitypool/
                - Ref: IdentityPool
          - Effect: Allow
            Action:
            - iot:Connect
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:iot:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - :client/serverlesspresso-*
          - Effect: Allow
            Action:
            - iot:Subscribe
            Resource: '*'
          - Effect: Allow
            Action:
            - iot:Receive
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:iot:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - :topic/*
    Metadata:
      SamResourceId: CognitoAuthorizedRole
  IdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: IdentityPool
      Roles:
        authenticated:
          Fn::GetAtt:
          - CognitoAuthorizedRole
          - Arn
        unauthenticated:
          Fn::GetAtt:
          - CognitoUnAuthorizedRole
          - Arn
    Metadata:
      SamResourceId: IdentityPoolRoleMapping
  CountingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: serverlesspresso-counting-table
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
    Metadata:
      SamResourceId: CountingTable
  PublisherFunctionAdmin:
    Type: AWS::Serverless::Function
    Description: Serverlesspresso Publisher. Invoked by EventBridge rule
    Properties:
      CodeUri: 
        Bucket: !Sub '${S3BucketName}'
        Key: 'PublisherFunctionAdmin.zip'
      Handler: PublisherFunctionAdmin/publishToIOT.handler
      Runtime: nodejs14.x
      Timeout: 3
      Environment:
        Variables:
          IOT_DATA_ENDPOINT:
            Fn::GetAtt:
            - IotEndpoint
            - IotEndpointAddress
          IOT_TOPIC: serverlesspresso-admin
      Policies:
      - Statement:
        - Effect: Allow
          Resource: arn:aws:iot:*
          Action:
          - iot:Connect
          - iot:Publish
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            EventBusName: Serverlesspresso
            Pattern:
              source:
              - Ref: Source
              detail-type:
              - prefix: OrderManager.
              - prefix: OrderProcessor.
              - prefix: Validator.
              - prefix: ConfigService.
    Metadata:
      SamResourceId: PublisherFunctionAdmin
  PublisherFunctionUser:
    Type: AWS::Serverless::Function
    Description: Serverlesspresso Publisher. Invoked by EventBridge rule
    Properties:
      CodeUri: 
        Bucket: !Sub '${S3BucketName}'
        Key: 'PublisherFunctionUser.zip'
      Handler: PublisherFunctionUser/publishToIOTuserTopic.handler
      Runtime: nodejs14.x
      Timeout: 3
      Environment:
        Variables:
          IOT_DATA_ENDPOINT:
            Fn::GetAtt:
            - IotEndpoint
            - IotEndpointAddress
          IOT_TOPIC: serverlesspresso-user-
      Policies:
      - Statement:
        - Effect: Allow
          Resource: arn:aws:iot:*
          Action:
          - iot:Connect
          - iot:Publish
      Events:
        OrderManagerEvents:
          Type: EventBridgeRule
          Properties:
            EventBusName: Serverlesspresso
            Pattern:
              source:
              - Ref: Source
              detail-type:
              - prefix: OrderManager.
        OrderProcessorEvents:
          Type: EventBridgeRule
          Properties:
            EventBusName: Serverlesspresso
            Pattern:
              source:
              - Ref: Source
              detail-type:
              - prefix: OrderProcessor.
    Metadata:
      SamResourceId: PublisherFunctionUser
  PublisherFunctionConfig:
    Type: AWS::Serverless::Function
    Description: Serverlesspresso Publisher. Invoked by EventBridge rule
    Properties:
      CodeUri: 
        Bucket: !Sub '${S3BucketName}'
        Key: 'PublisherFunctionConfig.zip'
      Handler: PublisherFunctionConfig/publishToIOT.handler
      Runtime: nodejs14.x
      Timeout: 3
      Environment:
        Variables:
          IOT_DATA_ENDPOINT:
            Fn::GetAtt:
            - IotEndpoint
            - IotEndpointAddress
          IOT_TOPIC: serverlesspresso-config
      Policies:
      - Statement:
        - Effect: Allow
          Resource: arn:aws:iot:*
          Action:
          - iot:Connect
          - iot:Publish
      Events:
        TriggerValidator:
          Type: EventBridgeRule
          Properties:
            EventBusName: Serverlesspresso
            Pattern:
              source:
              - Ref: Source
              detail-type:
              - prefix: ConfigService.
    Metadata:
      SamResourceId: PublisherFunctionConfig
  ConfigTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: serverlesspresso-config-table
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
    Metadata:
      SamResourceId: ConfigTable
  RESTApiConfigService:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location:
              Fn::Sub: s3://${S3BucketName}/RESTApiConfigService.yml
    Metadata:
      SamResourceId: RESTApiConfigService
  ConfigChangedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Sub '${S3BucketName}'
        Key: 'ConfigChangedFunction.zip'
      Handler: ConfigChangedFunction/configChanged.handler
      Runtime: nodejs14.x
      Timeout: 15
      MemorySize: 128
      Environment:
        Variables:
          EventBusName:
            Ref: ServerlesspressoEventBus
          Source:
            Ref: Source
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: ConfigTable
      - EventBridgePutEventsPolicy:
          EventBusName:
            Ref: ServerlesspressoEventBus
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream:
              Fn::GetAtt:
              - ConfigTable
              - StreamArn
            BatchSize: 1
            StartingPosition: TRIM_HORIZON
    Metadata:
      SamResourceId: ConfigChangedFunction
  ConfigRESTApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: DynamoDBinteraction
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            Resource:
              Fn::GetAtt:
              - ConfigTable
              - Arn
          - Effect: Allow
            Action:
            - dynamodb:Query
            Resource:
              Fn::Sub:
              - ${tableArn}${index}
              - tableArn:
                  Fn::GetAtt:
                  - ConfigTable
                  - Arn
                index: /index/*
    Metadata:
      SamResourceId: ConfigRESTApiRole
  GetQRcodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Sub '${S3BucketName}'
        Key: 'GetQRcodeFunction.zip'
      Handler: GetQRcodeFunction/getCode.handler
      Runtime: nodejs14.x
      Timeout: 15
      MemorySize: 128
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
          TableName:
            Ref: ValidatorTable
          TimeInterval:
            Ref: TimeInterval
          CodeLength:
            Ref: CodeLength
          TokensPerBucket:
            Ref: TokensPerBucket
          BusName:
            Ref: ServerlesspressoEventBus
          Source:
            Ref: Source
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ValidatorTable
      Events:
        GetQrCode:
          Type: Api
          Properties:
            RestApiId:
              Ref: RESTApiValidatorService
            Path: /qr-code
            Method: get
            Auth:
              Authorizer: MyCognitoAuthorizor
              AuthorizationScopes:
              - aws.cognito.signin.user.admin
    Metadata:
      SamResourceId: GetQRcodeFunction
  VerifyQRcodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Sub '${S3BucketName}'
        Key: 'VerifyQRcodeFunction.zip'
      Handler: VerifyQRcodeFunction/verifyCode.handler
      Runtime: nodejs14.x
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
          TableName:
            Ref: ValidatorTable
          TimeInterval:
            Ref: TimeInterval
          CodeLength:
            Ref: CodeLength
          TokensPerBucket:
            Ref: TokensPerBucket
          BusName:
            Ref: ServerlesspressoEventBus
          Source:
            Ref: Source
      Policies:
      - EventBridgePutEventsPolicy:
          EventBusName:
            Ref: ServerlesspressoEventBus
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ValidatorTable
      Events:
        GetQrCode:
          Type: Api
          Properties:
            RestApiId:
              Ref: RESTApiValidatorService
            Path: /qr-code
            Method: POST
            Auth:
              Authorizer: MyCognitoAuthorizor
              AuthorizationScopes:
              - aws.cognito.signin.user.admin
    Metadata:
      SamResourceId: VerifyQRcodeFunction
  RESTApiValidatorService:
    Type: AWS::Serverless::Api
    Name: RESTApiValidatorService
    Properties:
      StageName: Prod
      Cors:
        AllowOrigin: '''*'''
        AllowHeaders: '''*'''
        AllowMethods: '''GET,POST,OPTIONS'''
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizor
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          MyCognitoAuthorizor:
            UserPoolArn:
              Fn::GetAtt:
              - UserPool
              - Arn
    Metadata:
      SamResourceId: RESTApiValidatorService
  ValidatorTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: serverlesspresso-validator-table
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: N
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
    Metadata:
      SamResourceId: ValidatorTable
  FillDatabasesCustomResource:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Sub '${S3BucketName}'
        Key: 'FillDatabasesCustomResource.zip'
      Handler: FillDatabasesCustomResource/app.handler
      Runtime: nodejs14.x
      Timeout: 15
      MemorySize: 128
      Environment:
        Variables:
          configTable:
            Ref: ConfigTable
          countingTable:
            Ref: CountingTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ConfigTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: CountingTable
    Metadata:
      SamResourceId: FillDatabasesCustomResource
  DeploymentCustomResourcePrefil:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - FillDatabasesCustomResource
        - Arn
    Metadata:
      SamResourceId: DeploymentCustomResourcePrefil
  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
        - /
        - - stepfunctions
          - StateMachineExpressSync
    Metadata:
      SamResourceId: StateMachineLogGroup
  ValidatorNewOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Sub '${S3BucketName}'
        Key: 'ValidatorNewOrderFunction.zip'
      Handler: ValidatorNewOrderFunction/app.handler
      Runtime: nodejs14.x
      Timeout: 15
      MemorySize: 128
      Environment:
        Variables:
          TableName:
            Ref: OrderTable
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: OrderTable
    Metadata:
      SamResourceId: ValidatorNewOrderFunction
  SanitizeOrderLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Sub '${S3BucketName}'
        Key: 'SanitizeOrderLambda.zip'
      Handler: SanitizeOrderLambda/app.handler
      Runtime: nodejs14.x
      Timeout: 20
      MemorySize: 128
    Metadata:
      SamResourceId: SanitizeOrderLambda
  GetOrderByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Sub '${S3BucketName}'
        Key: 'GetOrderByIdFunction.zip'
      Handler: GetOrderByIdFunction/app.handler
      Runtime: nodejs14.x
      Timeout: 15
      MemorySize: 128
    Metadata:
      SamResourceId: GetOrderByIdFunction
  WorkFlowStarted:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Sub '${S3BucketName}'
        Key: 'WorkFlowStarted.zip'
      Handler: WorkFlowStarted/app.handler
      Runtime: nodejs14.x
      Timeout: 15
      MemorySize: 128
      Environment:
        Variables:
          TableName:
            Ref: OrderTable
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: OrderTable
    Metadata:
      SamResourceId: WorkFlowStarted
  WaitingCompletion:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Sub '${S3BucketName}'
        Key: 'WaitingCompletion.zip'
      Handler: WaitingCompletion/app.handler
      Runtime: nodejs14.x
      Timeout: 15
      MemorySize: 128
      Environment:
        Variables:
          TableName:
            Ref: OrderTable
          BusName:
            Ref: ServerlesspressoEventBus
          Source:
            Ref: Source
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: OrderTable
      - EventBridgePutEventsPolicy:
          EventBusName:
            Ref: ServerlesspressoEventBus
    Metadata:
      SamResourceId: WaitingCompletion
  OrderTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: serverlesspresso-order-table
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      - AttributeName: TS
        AttributeType: N
      - AttributeName: ORDERSTATE
        AttributeType: S
      - AttributeName: USERID
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
      LocalSecondaryIndexes:
      - IndexName: LSI-timestamp
        KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: TS
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
      GlobalSecondaryIndexes:
      - IndexName: GSI-status
        KeySchema:
        - AttributeName: ORDERSTATE
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
      - IndexName: GSI-userId
        KeySchema:
        - AttributeName: USERID
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
    Metadata:
      SamResourceId: OrderTable
  RESTApiForOrderManager:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location:
              Fn::Sub: s3://${S3BucketName}/RESTApiForOrderManager.yml
    Metadata:
      SamResourceId: RESTApiForOrderManager
  RESTApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: DynamoDBinteraction
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - states:StartExecution
            Resource:
              Fn::GetAtt:
              - '02OrderManagerStateMachine'
              - Arn
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            Resource:
              Fn::GetAtt:
              - OrderTable
              - Arn
          - Effect: Allow
            Action:
            - dynamodb:Query
            Resource:
              Fn::Sub:
              - ${tableArn}${index}
              - tableArn:
                  Fn::GetAtt:
                  - OrderTable
                  - Arn
                index: /index/*
    Metadata:
      SamResourceId: RESTApiRole
  02OrderManagerStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri:
        Bucket: !Sub '${S3BucketName}'
        Key: "02OrderManagerStateMachine.json"
      DefinitionSubstitutions:
        OMTable:
          Ref: OrderTable
        ConfigTable:
          Ref: ConfigTable
        SanitizeOrderLambda:
          Ref: SanitizeOrderLambda
      Policies:
      - EventBridgePutEventsPolicy:
          EventBusName:
            Ref: ServerlesspressoEventBus
      - LambdaInvokePolicy:
          FunctionName:
            Ref: SanitizeOrderLambda
      - DynamoDBReadPolicy:
          TableName:
            Ref: ConfigTable
      - DynamoDBWritePolicy:
          TableName:
            Ref: OrderTable
      - Statement:
        - Sid: SendTaskSuccess
          Effect: Allow
          Action:
          - states:SendTaskSuccess
          Resource: '*'
    Metadata:
      SamResourceId: '02OrderManagerStateMachine'

  01OrderProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - states.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
    Metadata:
      SamResourceId: '01OrderProcessorRole'
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: orderProcessorWFPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: events:PutEvents
          Resource:
            Fn::GetAtt:
            - ServerlesspressoEventBus
            - Arn
        - Effect: Allow
          Action: dynamodb:GetItem
          Resource:
            Fn::GetAtt:
            - ConfigTable
            - Arn
        - Effect: Allow
          Action: dynamodb:UpdateItem
          Resource:
            Fn::GetAtt:
            - ConfigTable
            - Arn
        - Effect: Allow
          Action: dynamodb:UpdateItem
          Resource:
            Fn::GetAtt:
            - CountingTable
            - Arn
        - Effect: Allow
          Action: states:ListExecutions
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:states:'
              - Ref: AWS::Region
              - ':'
              - Ref: AWS::AccountId
              - ':stateMachine:'
              - '*'
      Roles:
      - Ref: 01OrderProcessorRole
    Metadata:
      SamResourceId: RolePolicies

  OrderProcessorWorkflow:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionS3Location:
        Bucket: !Sub '${S3BucketName}'
        Key: "orderProcessorWorkflow.json"
      RoleArn: !GetAtt 01OrderProcessorRole.Arn
    Metadata:
      SamResourceId: 'OrderProcessorWorkflow'

  logAll:
      Type: AWS::Events::Rule
      Properties:
        EventBusName: Serverlesspresso
        EventPattern:
          source:
            - awsserverlessda.serverlesspresso
        Name: logAll
        State: ENABLED
        Targets:
          - Id: LogAll1234
            Arn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/events/serverlesspressoEventBus'
      DependsOn: ServerlesspressoEventBus
        
  NewOrder:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: Serverlesspresso
      EventPattern:
        detail-type:
          - Validator.NewOrder
        source:
          - awsserverlessda.serverlesspresso
      Name: NewOrder
      State: ENABLED
      Targets:
        - Id: NewOrder1234
          Arn: !GetAtt OrderProcessorWorkflow.Arn
          RoleArn: !GetAtt InvokeStepfunctionRole.Arn 
    DependsOn: ServerlesspressoEventBus

  InvokeStepfunctionRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 
            - events.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies: 
      - PolicyName: InvokeStepFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: states:StartExecution
            Resource:
              Fn::GetAtt:
              - OrderProcessorWorkflow
              - Arn

      
  WaitingCompletionRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: Serverlesspresso
      EventPattern:
        detail-type:
          - OrderProcessor.WaitingCompletion
        source:
          - awsserverlessda.serverlesspresso
      Name: WaitingCompletion
      State: ENABLED
      Targets:
        - Id: waitingCompletionRuleID1234
          Arn: !GetAtt WaitingCompletion.Arn
    DependsOn: ServerlesspressoEventBus
  WorkflowStartedRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: Serverlesspresso
      EventPattern:
        detail-type:
          - OrderProcessor.WorkflowStarted
        source:
          - awsserverlessda.serverlesspresso
      Name: WorkflowStarted
      State: ENABLED
      Targets:
        - Id: workflowStartedRuleID1234
          Arn: !GetAtt WorkFlowStarted.Arn
    DependsOn: ServerlesspressoEventBus

  WaitingCompletionRBPolicy:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref WaitingCompletion
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WaitingCompletionRule.Arn
    DependsOn: WaitingCompletion

  WorkflowStartedRBPolicy:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref WorkFlowStarted
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WorkflowStartedRule.Arn
    DependsOn: WorkFlowStarted

Outputs:
  OrderManagerRestApi:
    Value: 
      Fn::Join:
              - ''
              - - 'https://'
                - !Ref RESTApiForOrderManager
                - '.execute-api.'
                - Ref: AWS::Region
                - '.amazonaws.com/Prod/'
  ConfigServiceApi:
    Value: 
      Fn::Join:
              - ''
              - - 'https://'
                - !Ref RESTApiConfigService
                - '.execute-api.'
                - Ref: AWS::Region
                - '.amazonaws.com/Prod/'
  QRApi:
    Value: 
      Fn::Join:
              - ''
              - - 'https://'
                - !Ref RESTApiValidatorService
                - '.execute-api.'
                - Ref: AWS::Region
                - '.amazonaws.com/Prod/'
  UserPoolId:
    Value: !Ref UserPool
  UserPoolWebClientId:
    Value: !Ref UserPoolClient
  ServerlessPressoIdentityPool:
    Value: !Ref IdentityPool 
  IoTEndpoint:
    Value: !GetAtt IoTRealtimeParameter.Value
    


